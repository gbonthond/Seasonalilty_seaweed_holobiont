}
# Combine estimates weighted by inverse variance (standard error)
combine_estimates <- function(estimates, std_errors) {
std_errors <- as.numeric(std_errors)  # Ensure std_errors are numeric
if (any(is.na(std_errors)) | length(std_errors) < 1) return(NA)  # Check for invalid std_errors
weights <- 1 / (std_errors^2)
weighted_mean <- sum(weights * estimates) / sum(weights)
return(weighted_mean)
}
# Combine standard errors
combine_std_errors <- function(std_errors) {
std_errors <- as.numeric(std_errors)  # Ensure std_errors are numeric
if (any(is.na(std_errors)) | length(std_errors) < 1) return(NA)  # Check for invalid std_errors
# Remove NA values before proceeding with calculation
std_errors <- std_errors[!is.na(std_errors)]
if (length(std_errors) > 0) {
combined_se <- sqrt(1 / sum(1 / (std_errors^2)))
return(combined_se)
} else {
return(NA)
}
}
# Combine degrees of freedom using harmonic mean
combine_dfs <- function(dfs) {
dfs <- as.numeric(dfs)
dfs <- dfs[!is.na(dfs)]
if (length(dfs) > 0) {
combined_df <- length(dfs) / sum(1 / dfs)
return(combined_df)
} else {
return(NA)
}
}
# Create a function to generate significance stars based on p-values
get_significance_stars <- function(p_value) {
if (is.na(p_value)) return(NA)
if (p_value < 0.001) {
return("***")
} else if (p_value < 0.01) {
return("**")
} else if (p_value < 0.05) {
return("*")
} else {
return("")
}
}
# Parse responses_to_combine formula
if (!is.null(responses_to_combine)) {
responses_to_combine <- all.vars(responses_to_combine)
}
# Parse predictors_to_combine formulas
parsed_predictors <- list()
if (!is.null(predictors_to_combine)) {
if (inherits(predictors_to_combine, "formula")) {
predictors_to_combine <- list(predictors_to_combine)
}
for (formula in predictors_to_combine) {
formula_terms <- terms(as.formula(formula))
response <- attr(formula_terms, "response")
response <- as.character(attr(formula_terms, "variables")[[response + 1]])
predictors <- attr(formula_terms, "term.labels")
parsed_predictors[[response]] <- predictors
}
}
# Initialize the result data frame
combined_results <- data.frame(
Response = character(),
Predictor = character(),
Estimate = numeric(),
Std.Error = numeric(),
DF = numeric(),
Crit.Value = numeric(),
F.Chi = numeric(),
P.Value = numeric(),
Std.Estimate = numeric(),
Significance = character(),
stringsAsFactors = FALSE
)
# Step 1: Combine responses
if (!is.null(responses_to_combine)) {
filtered_df <- psem[psem$Response %in% responses_to_combine, ]
predictors <- unique(filtered_df$Predictor)
for (predictor in predictors) {
subset_rows <- filtered_df[filtered_df$Predictor == predictor, ]
if (nrow(subset_rows) > 0) {
combined_p_result <- combine_p_values(subset_rows$P.Value)
combined_p <- combined_p_result$combined_p
chi_square <- combined_p_result$chi_square
combined_std_estimate <- combine_std_estimates(subset_rows$Std.Estimate)
combined_estimate <- combine_estimates(subset_rows$Estimate, subset_rows$Std.Error)
combined_std_error <- combine_std_errors(subset_rows$Std.Error)
combined_df <- combine_dfs(subset_rows$DF)
combined_crit_value <- combined_estimate / combined_std_error
significance_star <- get_significance_stars(combined_p)
combined_results <- rbind(combined_results, data.frame(
Response = ifelse(is.null(response_name), paste(responses_to_combine, collapse = " + "), response_name),
Predictor = predictor,
Estimate = combined_estimate,
Std.Error = combined_std_error,
DF = combined_df,
Crit.Value = combined_crit_value,
F.Chi = round(chi_square, digits = 4),
P.Value = round(combined_p, digits = 4),
Std.Estimate = combined_std_estimate,
Significance = significance_star,
stringsAsFactors = FALSE
))
}
}
}
# Step 2: Combine predictors
if (length(parsed_predictors) > 0) {
for (response in names(parsed_predictors)) {
predictors <- parsed_predictors[[response]]
filtered_df <- psem[psem$Response == response & psem$Predictor %in% predictors, ]
if (nrow(filtered_df) > 0) {
combined_p_result <- combine_p_values(filtered_df$P.Value)
combined_p <- combined_p_result$combined_p
chi_square <- combined_p_result$chi_square
combined_std_estimate <- combine_std_estimates(filtered_df$Std.Estimate)
combined_estimate <- combine_estimates(filtered_df$Estimate, filtered_df$Std.Error)
combined_std_error <- combine_std_errors(filtered_df$Std.Error)
combined_df <- combine_dfs(filtered_df$DF)
combined_crit_value <- combined_estimate / combined_std_error
significance_star <- get_significance_stars(combined_p)
combined_results <- rbind(combined_results, data.frame(
Response = response,
Predictor = ifelse(is.null(predictor_name), paste(predictors, collapse = " + "), predictor_name),
Estimate = combined_estimate,
Std.Error = combined_std_error,
DF = combined_df,
Crit.Value = combined_crit_value,
F.Chi = round(chi_square, digits = 4),
P.Value = round(combined_p, digits = 4),
Std.Estimate = combined_std_estimate,
Significance = significance_star,
stringsAsFactors = FALSE
))
}
}
}
colnames(combined_results) <- c(colnames(combined_results)[1:9], "")
combined_results$Estimate <- round(combined_results$Estimate, digits = 5)
combined_results$Std.Error <- round(combined_results$Std.Error, digits = 5)
combined_results$DF <- round(combined_results$DF, digits = 2)
combined_results$Crit.Value <- round(combined_results$Crit.Value, digits = 5)
combined_results$Std.Estimate <- round(combined_results$Std.Estimate, digits = 5)
return(combined_results)
}
###################
#### DATA PREPARATION ####
#holo_var      <- read.csv("C:/dam_holo/analysis/holo_var.csv", row.names = 1, header = T, stringsAsFactors = T);dim(holo_var)
#fauna_count   <- read.csv("C:/dam_holo/analysis/fauna_count_updated.csv", row.names = 1, header = T);dim(fauna_count)
#fauna_mass    <- read.csv("C:/dam_holo/analysis/fauna_mass_updated.csv", row.names = 1, header = T);dim(fauna_mass)
#fauna_tax     <- read.csv("C:/dam_holo/analysis/fauna_tax_updated.csv", header = T, row.names = 1, stringsAsFactors = T);dim(fauna_tax)
#micro_count   <- read.csv("C:/dam_holo/analysis/micro_otu.csv", row.names = 1, header = T, stringsAsFactors = T);dim(micro_count)
#micro_picrust <- read.table("C:/dam_holo/picrust/picrust_dam_holo/KO_predicted.tsv", row.names = 1, sep = "\t", header = T);dim(micro_picrust)
#micro_pathway <- read.table("C:/dam_holo/picrust/picrust_dam_holo/pathways_out/path_abun_predictions.tsv", row.names = 1, sep = "\t", header = T);dim(micro_pathway)
#micro_tax     <- read.csv("C:/dam_holo/analysis/micro_tax.csv", row.names = 1, header = T, stringsAsFactors = T)[, -c(2, 4, 6, 8, 10, 12)];dim(micro_tax)
### microbiota subset
#micro_rar <- rarefaction(micro_count, sample = 1000, replicate = 100);dim(micro_rar)
#micro_ko_count <- as.matrix(micro_count[, rownames(micro_picrust)]) %*% as.matrix(micro_picrust);dim(micro_ko_count)
#micro_ko_count <- micro_ko_count[, colSums(micro_ko_count) > 0];dim(micro_ko_count)
#micro_ko_count <- data.frame(micro_ko_count[, order(colSums(micro_ko_count), decreasing = T)]);dim(micro_ko_count)
#micro_pw_count <- as.matrix(micro_count[, rownames(micro_pathway)]) %*% as.matrix(micro_pathway);dim(micro_pw_count)
#micro_pw_count <- micro_pw_count[, colSums(micro_pw_count) > 0];dim(micro_pw_count)
#micro_pw_count <- data.frame(micro_pw_count[, order(colSums(micro_pw_count), decreasing = T)]);dim(micro_pw_count)
#micro_rar_tax <- micro_tax[colnames(micro_rar), ]
#micro_rar_tax$abundance <- abundance(micro_rar, micro_rar_tax)
#micro_rar_tax$occupancy <- occupancy(micro_rar, micro_rar_tax)
#micro_gen <- taxonomy.aggregate(micro_rar, micro_rar_tax, level = "genus")
#micro_ko_rar <- rarefaction(micro_ko_count, sample = 100000, replicate = 100);dim(micro_ko_rar)
#micro_ko_rar <- round(micro_ko_rar[, colSums(round(micro_ko_rar)) > 0]);dim(micro_ko_rar)
#micro_ko_rar <- micro_ko_rar[, order(colSums(micro_ko_rar), decreasing = T)];dim(micro_ko_rar)
#micro_pw_rar <- rarefaction(round(micro_pw_count), sample = 100000, replicate = 100);dim(micro_pw_rar)
#micro_pw_rar <- round(micro_pw_rar[, colSums(round(micro_pw_rar)) > 0]);dim(micro_pw_rar)
#micro_pw_rar <- micro_pw_rar[, order(colSums(micro_pw_rar), decreasing = T)];dim(micro_pw_rar)
#micro_var <- droplevels(holo_var[rownames(micro_count), ]);dim(micro_var)
#micro_var$micro_en   <- calc_SPIE(micro_count)
#micro_var$micro_qd   <- estimateD(t(micro_count), q = 2, nboot = 0)$qD
#micro_var$micro_rar_qd   <- estimateD(t(micro_rar), q = 2, nboot = 0)$qD
#micro_var$micro_gen_qd   <- estimateD(t(micro_gen), q = 2, nboot = 0)$qD
#micro_var$micro_ko_qd   <- estimateD(t(micro_ko_rar[, colSums(round(micro_ko_rar)) > 0]), q = 2, nboot = 0)$qD
#micro_var$micro_pw_qd   <- estimateD(t(micro_pw_rar[, colSums(round(micro_pw_rar)) > 0]), q = 2, nboot = 0)$qD
# modules
#micro_var$M00155   <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K02276", "K02275", "K02274", "K15408")]) # M00155 respiration
#micro_var$nitrification <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K10944","K10945","K10946","K10535")]) # M00528 nitrification
#micro_var$M00530.1 <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K02567","K02568","K00370","K00371","K00374")]) # M00530.1 dissimilatory nitrate reduction
#micro_var$M00530.2 <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K00362","K00363","K03385","K15876")]) # M00530.2 dissimilatory nitrite reduction
#micro_var$M00530   <- micro_var$M00530.1 + micro_var$M00530.2 # M00530 dissimilatory nitrate reduction
#micro_var$M00529   <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K02567","K02568","K00370","K00371","K00374","K00368","K15864","K04561","K02305","K00376")]) # M00529 denitrification
#micro_var$sulfate_reduction <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K00958","K00394","K00395","K11180","K11181")]) # M00596 dissimlatory sulfate reduction
#micro_var$sulfur_oxidation  <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K17222","K17223","K17224","K17225","K17226","K17227")]) # M00595 Thiosulfate oxidation
#micro_var$methane_oxidation <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K10944","K10945","K10946","K16157","K16158","K16159","K16161","K16160","K16162","K14028","K14029","K23995")]) # M00174 methane oxidation
#micro_var$CO2_reduction     <- rowSums(micro_ko_rar[, colnames(micro_ko_rar) %in% c("K00200","K00201","K00202","K00203","K11261","K00205","K11260","K00204","K00672","K01499","K00319","K13942","K00320","K00577","K00578","K00579","K00580","K00581","K00582","K00583","K00584","K00399","K00401","K00402","K08264","K08265","K22480","K22481","K22482","K03388","K03389","K03390","K14127","K14126","K14128","K22516","K00125")]) # M00567 CO2 reduction
# pathways
#micro_var$respiration       <- micro_pw_rar$PWY.3781 # aerobic respiration AEROBIC-RESP-PWY / PWY.3781
#micro_var$denitrification   <- micro_pw_rar$DENITRIFICATION.PWY # AEROBIC-RESP-PWY - aerobic respiration
#micro_var$acetogenesis      <- micro_pw_rar$METH.ACETATE.PWY
#micro_var$methanogenesis    <- micro_pw_rar$METHANOGENESIS.PWY
#micro_var$mixed_acid_fermentation <- micro_pw_rar$FERMENTATION.PWY
#micro_var$acetylene_fermentation <- micro_pw_rar$P161.PWY # Acetylene degradation
#micro_var$acetylcoa_fermentation <- micro_pw_rar$PWY.5676 #acetyl-CoA fermentation to butanoate
#micro_var$tca <- micro_pw_rar$TCA #acetyl-CoA fermentation to butanoate
### fauna subset
#fauna_var <- droplevels(holo_var[holo_var$group == "macrofauna" & is.na(holo_var$temperature) == F & is.na(holo_var$grain) == F & rownames(holo_var) %in% rownames(fauna_count), ]);dim(fauna_var)
#fauna_count <- fauna_count[rownames(fauna_var), order(colSums(fauna_count), decreasing = T)];dim(fauna_count)
#fauna_count <- fauna_count[, colSums(fauna_count) > 0];dim(fauna_count)
#fauna_mass  <- fauna_mass[rownames(fauna_var),  order(colSums(fauna_mass), decreasing = T)];dim(fauna_mass)
#fauna_mass  <- fauna_mass[, colSums(fauna_mass) > 0];dim(fauna_mass)
#fauna_count_tax <- fauna_tax[colnames(fauna_count), ];dim(fauna_count_tax)
#fauna_count_tax$abundance <- abundance(fauna_count, fauna_count_tax)
#fauna_count_tax$occupancy <- occupancy(fauna_count, fauna_count_tax)
#fauna_mass_tax  <- fauna_tax[colnames(fauna_mass), ];dim(fauna_mass_tax)
#fauna_mass_tax$abundance <- abundance(fauna_mass, fauna_mass_tax)
#fauna_mass_tax$occupancy <- occupancy(fauna_mass, fauna_mass_tax)
#fauna_count_gen <- taxonomy.aggregate(fauna_count, fauna_tax, level = "genus")
#fauna_var$fauna_qd        <- estimateD(t(fauna_count), q = 2, nboot = 0)$qD
#fauna_var$fauna_gen_qd    <- estimateD(t(fauna_count_gen), q = 2, nboot = 0)$qD
#fauna_var$fauna_mass      <- rowSums(fauna_mass)
#fauna_var$fauna_abundance <- rowSums(fauna_count)
#fauna_var$BPc <- bpc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var)
#fauna_var$IPc <- ipc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var)
#fauna_var$mobility <- tpc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var, trait = "mi")
#fauna_var$reworking <- tpc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var, trait = "ri")
#fauna_var$burrow <- tpc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var, trait = "bi")
#fauna_var$feeding <- tpc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var, trait = "ifi")
#fauna_var$injection <- tpc(counts = fauna_count, mass = fauna_mass, taxonomy = fauna_count_tax, var = fauna_var, trait = "ipi")
### selecting the nearest macrofuanal grab
#micro_var_red <- micro_var[micro_var$core == "b" | (micro_var$core == "a" & !micro_var$station %in% micro_var[micro_var$core == "b", "station"]) | (micro_var$core == "c" & !micro_var$station %in% micro_var[micro_var$core == "b", "station"] &  !micro_var$station %in% micro_var[micro_var$core == "a", "station"]), ];dim(micro_var_red)
#micro_var_red$name_micro <- rownames(micro_var_red);rownames(micro_var_red) <- micro_var_red$station
#micro_var_red <- micro_var_red[rownames(micro_var_red) %in% fauna_var$station, ];dim(micro_var_red)
#fauna_var_red <- aggregate.to.nearest(fauna_var, micro_var_red);dim(fauna_var_red)
#fauna_var_red$name_fauna <- rownames(fauna_var_red);rownames(fauna_var_red) <- fauna_var_red$station
#fauna_var_red <- fauna_var_red[rownames(micro_var_red), ];dim(fauna_var_red)
#all.equal(rownames(micro_var_red), rownames(fauna_var_red))
#var_red <- cbind(micro_var_red, fauna_var_red[, !colnames(fauna_var_red) %in% colnames(micro_var_red)]);dim(var_red)
#micro_red           <- micro_count[var_red$name_micro, colSums(micro_count[var_red$name_micro, ]) > 0];row.names(micro_red) <- var_red$station;dim(micro_red)
#micro_rar_red       <- micro_rar[var_red$name_micro, colSums(micro_rar[var_red$name_micro, ]) > 0];row.names(micro_rar_red) <- var_red$station;dim(micro_rar_red)
#micro_rar_red_tax   <- micro_rar_tax[colnames(micro_rar_red),]
#micro_rar_red_tax$abundance <- abundance(micro_rar_red, micro_rar_red_tax)
#micro_rar_red_tax$occupancy <- occupancy(micro_rar_red, micro_rar_red_tax)
#micro_gen_red       <- micro_gen[var_red$name_micro, colSums(micro_gen[var_red$name_micro, ]) > 0];row.names(micro_gen_red) <- var_red$station;dim(micro_gen_red)
#micro_gen_red       <- micro_gen_red[, order(colSums(micro_gen_red), decreasing = T)]
#micro_ko_red        <- micro_ko[var_red$name_micro, colSums(micro_ko[var_red$name_micro, ]) > 0];row.names(micro_ko_red) <- var_red$station;dim(micro_ko_red)
#micro_ko_rar_red    <- micro_ko_rar[var_red$name_micro, colSums(micro_ko_rar[var_red$name_micro, ]) > 0];row.names(micro_ko_rar_red) <- var_red$station;dim(micro_ko_red)
#micro_ko_rar_red    <- micro_ko_rar[var_red$name_micro, colSums(micro_ko_rar[var_red$name_micro, ]) > 0];row.names(micro_ko_rar_red) <- var_red$station;dim(micro_ko_rar_red)
#micro_pw_red        <- micro_pw[var_red$name_micro, colSums(micro_pw[var_red$name_micro, ]) > 0];row.names(micro_pw_red) <- var_red$station;dim(micro_pw_red)
#micro_pw_rar_red    <- micro_pw_rar[var_red$name_micro, colSums(micro_pw_rar[var_red$name_micro, ]) > 0];row.names(micro_pw_rar_red) <- var_red$station;dim(micro_pw_red)
#micro_pw_rar_red    <- micro_pw_rar[var_red$name_micro, colSums(micro_pw_rar[var_red$name_micro, ]) > 0];row.names(micro_pw_rar_red) <- var_red$station;dim(micro_pw_rar_red)
#fauna_count_red     <- fauna_count[var_red$name_fauna, colSums(fauna_count[var_red$name_fauna, ]) > 0];row.names(fauna_count_red) <- var_red$station;dim(fauna_count_red)
#fauna_mass_red      <- fauna_mass[var_red$name_fauna, colSums(fauna_mass[var_red$name_fauna, ]) > 0];row.names(fauna_mass_red) <- var_red$station;dim(fauna_mass_red)
#fauna_count_gen_red <- fauna_count_gen[var_red$name_fauna, colSums(fauna_count_gen[var_red$name_fauna, ]) > 0];row.names(fauna_count_gen_red) <- var_red$station;dim(fauna_count_gen_red)
### saving data.frames
#save(micro_count, file = "C:/dam_holo/analysis/Rdata/micro_count.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_count.Rdata")
#save(micro_rar, file = "C:/dam_holo/analysis/Rdata/micro_rar.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_rar.Rdata")
#save(micro_ko, file = "C:/dam_holo/analysis/Rdata/micro_ko.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_ko.Rdata")
#save(micro_ko_rar, file = "C:/dam_holo/analysis/Rdata/micro_ko_rar.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_ko_rar.Rdata")
#save(micro_pw, file = "C:/dam_holo/analysis/Rdata/micro_pw.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_pw.Rdata")
#save(micro_pw_rar, file = "C:/dam_holo/analysis/Rdata/micro_pw_rar.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_pw_rar.Rdata")
#save(micro_tax, file = "C:/dam_holo/analysis/Rdata/micro_tax.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_tax.Rdata")
#save(micro_rar_tax, file = "C:/dam_holo/analysis/Rdata/micro_rar_tax.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_rar_tax.Rdata")
#save(micro_var, file = "C:/dam_holo/analysis/Rdata/micro_var.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_var.Rdata")
#save(fauna_var, file = "C:/dam_holo/analysis/Rdata/fauna_var.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_var.Rdata")
#save(fauna_count, file = "C:/dam_holo/analysis/Rdata/fauna_count.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_count.Rdata")
#save(fauna_mass, file = "C:/dam_holo/analysis/Rdata/fauna_mass.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_mass.Rdata")
#save(fauna_count_gen, file = "C:/dam_holo/analysis/Rdata/fauna_count_gen.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_count_gen.Rdata")
#save(fauna_count_tax, file = "C:/dam_holo/analysis/Rdata/fauna_count_tax.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_count_tax.Rdata")
#save(var_red, file = "C:/dam_holo/analysis/Rdata/var_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/var_red.Rdata")
#save(micro_red, file = "C:/dam_holo/analysis/Rdata/micro_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_red.Rdata")
#save(micro_rar_red, file = "C:/dam_holo/analysis/Rdata/micro_rar_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_rar_red.Rdata")
#save(micro_rar_red_tax, file = "C:/dam_holo/analysis/Rdata/micro_rar_red_tax.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_rar_red_tax.Rdata")
#save(micro_gen_red, file = "C:/dam_holo/analysis/Rdata/micro_gen_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_gen_red.Rdata")
#save(micro_ko_red, file = "C:/dam_holo/analysis/Rdata/micro_ko_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_ko_red.Rdata")
#save(micro_ko_rar_red, file = "C:/dam_holo/analysis/Rdata/micro_ko_rar_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_ko_rar_red.Rdata")
#save(micro_pw_red, file = "C:/dam_holo/analysis/Rdata/micro_pw_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_pw_red.Rdata")
#save(micro_pw_rar_red, file = "C:/dam_holo/analysis/Rdata/micro_pw_rar_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/micro_pw_rar_red.Rdata")
#save(fauna_count_red, file = "C:/dam_holo/analysis/Rdata/fauna_count_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_count_red.Rdata")
#save(fauna_mass_red, file = "C:/dam_holo/analysis/Rdata/fauna_mass_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_mass_red.Rdata")
#save(fauna_count_gen_red, file = "C:/dam_holo/analysis/Rdata/fauna_count_gen_red.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/fauna_count_gen_red.Rdata")
#########################
#### nMDS ####
var_red$group <- as.factor(rep("group", nrow(var_red)))
var_red$log2_grain    <- log2(var_red$grain)
var_red$sqrt_mud      <- sqrt(var_red$mud)
var_red$sqrt_BPc      <- sqrt(var_red$BPc)
var_red$sqrt_IPc      <- sqrt(var_red$IPc)
var_red$log_BPc       <- log(var_red$BPc)
var_red$log_IPc       <- log(var_red$IPc)
var_red$log_fauna_mass<- log(var_red$fauna_mass)
var_red$log_tom       <- log(var_red$tom)
var_red$day           <- as.factor(var_red$day)
#micro_red_nmds          <- nmds.func(micro_rar_red,    dist = "bray", center = F, autotransform = F, pc = F);micro_red_nmds$stress
#save(micro_red_nmds, file = "C:/dam_holo/analysis/Rdata/nmds/micro_red_nmds.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/nmds/micro_red_nmds.Rdata")
#micro_gen_red_nmds      <- nmds.func(micro_gen_red,    dist = "bray", center = F, autotransform = F, pc = F);micro_gen_red_nmds$stress
#save(micro_gen_red_nmds, file = "C:/dam_holo/analysis/Rdata/nmds/micro_gen_red_nmds.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/nmds/micro_gen_red_nmds.Rdata")
#micro_ko_red_nmds       <- nmds.func(micro_ko_rar_red, dist = "bray", center = F, autotransform = F, pc = F);micro_ko_red_nmds$stress
#save(micro_ko_red_nmds, file = "C:/dam_holo/analysis/Rdata/nmds/micro_ko_red_nmds.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/nmds/micro_ko_red_nmds.Rdata")
#micro_pw_red_nmds       <- nmds.func(micro_pw_rar_red, dist = "bray", center = F, autotransform = F, pc = F);micro_pw_red_nmds$stress
#save(micro_pw_red_nmds, file = "C:/dam_holo/analysis/Rdata/nmds/micro_pw_red_nmds.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/nmds/micro_pw_red_nmds.Rdata")
#fauna_count_red_nmds    <- nmds.func(fauna_count_red,  dist = "bray", center = F, autotransform = F, pc = F);fauna_count_red_nmds$stress
#save(fauna_count_red_nmds, file = "C:/dam_holo/analysis/Rdata/nmds/fauna_count_red_nmds.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/nmds/fauna_count_red_nmds.Rdata")
#fauna_mass_red_nmds    <- nmds.func(fauna_mass_red,  dist = "bray", center = F, autotransform = F, pc = F);fauna_mass_red_nmds$stress
#save(fauna_mass_red_nmds, file = "C:/dam_holo/analysis/Rdata/nmds/fauna_mass_red_nmds.Rdata")
load(file = "C:/dam_holo/analysis/Rdata/nmds/fauna_mass_red_nmds.Rdata")
var_red$micro_nmds1     <- micro_red_nmds$points[, 1]
var_red$micro_nmds2     <- micro_red_nmds$points[, 2]
var_red$micro_gen_nmds1 <- micro_gen_red_nmds$points[, 1]
var_red$micro_gen_nmds2 <- micro_gen_red_nmds$points[, 2]
var_red$micro_ko_nmds1  <- micro_ko_red_nmds$points[, 1]
var_red$micro_ko_nmds2  <- micro_ko_red_nmds$points[, 2]
var_red$micro_pw_nmds1  <- micro_pw_red_nmds$points[, 1]
var_red$micro_pw_nmds2  <- micro_pw_red_nmds$points[, 2]
var_red$fauna_nmds1     <- fauna_count_red_nmds$points[, 1]
var_red$fauna_nmds2     <- fauna_count_red_nmds$points[, 2]
var_red$fauna_mass_nmds1     <- fauna_mass_red_nmds$points[, 1]
var_red$fauna_mass_nmds2     <- fauna_mass_red_nmds$points[, 2]
#############
#### STACKED BARPLOTS ####
th1 <- theme(axis.text.x = element_blank(), axis.text.y = element_text(lineheight = 7), axis.title = element_blank(), title = element_blank(), legend.text = element_text(size = 6), legend.position = "none",        legend.title = element_blank(), panel.spacing.y = unit(c(0, 0), "mm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(fill = "darkgrey"), panel.border = element_rect(fill = "transparent", colour = "black",linewidth = 1), axis.ticks.length.y = unit(1, "mm"), axis.ticks.y = element_line(colour = "#333333", linewidth = .1), axis.ticks.length.x = unit(0, "mm"), plot.margin = unit(c(1, 1, 1, 1), "mm"))
th2 <- theme(axis.text.x = element_blank(), axis.text.y = element_text(lineheight = 7), axis.title = element_blank(), title = element_blank(), legend.text = element_text(size = 6), legend.key.size = unit(3, 'mm'), legend.title = element_blank(), panel.spacing.y = unit(c(0, 0), "mm"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(fill = "darkgrey"), panel.border = element_rect(fill = "transparent", colour = "black",linewidth = 1), axis.ticks.length.y = unit(1, "mm"), axis.ticks.y = element_line(colour = "#333333", linewidth = .1), axis.ticks.length.x = unit(0, "mm"), plot.margin = unit(c(1, 1, 1, 1), "mm"))
var_red$sample <- rownames(var_red)
x_micro_nmds1<- unique(paste(var_red[order(var_red$micro_nmds1, decreasing = F),]$cruise,
var_red[order(var_red$micro_nmds1, decreasing = F),]$sample, sep="_"))
x_micro_nmds2<- unique(paste(var_red[order(var_red$micro_nmds2, decreasing = F),]$cruise,
var_red[order(var_red$micro_nmds2, decreasing = F),]$sample, sep="_"))
x_fauna_nmds1<- unique(paste(var_red[order(var_red$fauna_nmds1, decreasing = F),]$cruise,
var_red[order(var_red$fauna_nmds1, decreasing = F),]$sample, sep="_"))
x_fauna_nmds2<- unique(paste(var_red[order(var_red$fauna_nmds2, decreasing = F),]$cruise,
var_red[order(var_red$fauna_nmds2, decreasing = F),]$sample, sep="_"))
#micro_genus
{
micro_rar_tax$otu <- rownames(micro_rar_tax)
colors_gen <- scale_fill_manual(values = c("#da814e",
colorRampPalette(c("#e5f1f5", "#143b54"))(18),#(24),
colorRampPalette(c("#c6dfaf", "#226b1e"))(5),#(7),
"#F781BF","#6f3819","#800080","#55FFFF",
colorRampPalette(c("#ffe88d", "#ffcc00"))(7),#(9),
#colorRampPalette(c("#fdd1d1", "#e31a1c"))(4),
colorRampPalette(c("#ffe6d5", "#ff7f00"))(4),
"#e31a1c"))
micro_gen_red_bars_nmds1 <- stacked.bars(input_variable = var_red,
input_community = micro_rar_red[, 1:1000],
input_tax = micro_rar_red_tax[1:1000, ],
taxon_level = "genus",
var_list = c("cruise","sample"),
number = 40,
tax_disp = c("phylum","class","family","genus"),
X_levels = x_micro_nmds1,
trans = "identity", bars = T) + th1 + colors_gen
micro_gen_red_bars_nmds2 <- stacked.bars(input_variable = var_red,
input_community = micro_rar_red[, 1:1000],
input_tax = micro_rar_red_tax[1:1000, ],
taxon_level = "genus",
var_list = c("cruise","sample"),
number = 40,
tax_disp = c("phylum","class","family","genus"),
X_levels = x_micro_nmds2,
trans = "identity", bars = T) + th1 + colors_gen
micro_gen_red_bars_legend <- get_legend(stacked.bars(input_variable = var_red,
input_community = micro_rar_red[, 1:1000],
input_tax = micro_rar_red_tax[1:1000, ],
taxon_level = "genus",
var_list = c("cruise","sample"),
number = 40,
tax_disp = c("phylum","class","family","genus"),
X_levels = x_micro_nmds2,
trans = "identity", bars = T) + th2 + colors_gen)
}
### fauna_species
{
colors_fauna_sps <- scale_fill_manual(values = c(#colorRampPalette(c("#61666F", "#343b46"))(1),
"#1B5338",
colorRampPalette(c("#61666F", "#343b46"))(2),
#colorRampPalette(c("#F1D0BD", "#da814e"))(2),
colorRampPalette(c("#fdd1d1", "#e31a1c"))(5),
colorRampPalette(c("#ffe6d5", "#ff7f00"))(7),
colorRampPalette(c("#ffe88d", "#ffcc00"))(2),
"#943b54",
colorRampPalette(c("#c6dfaf", "#226b1e"))(5),
colorRampPalette(c("#e5f1f5", "#143b54"))(17)))
fauna_sps_red_bars_nmds1 <- stacked.bars(input_variable = var_red,
input_community = fauna_count_red,
input_tax = fauna_count_tax[colnames(fauna_count_red), 1:7],
taxon_level = "genus",
var_list = c("cruise","sample"),
number = 40,
tax_disp = c("phylum", "family", "genus"),
X_levels = x_fauna_nmds1,
trans = "identity", bars = T, proportional = T) + th1 + colors_fauna_sps
fauna_sps_red_bars_nmds2 <- stacked.bars(input_variable = var_red,
input_community = fauna_count_red,
input_tax = fauna_count_tax[colnames(fauna_count_red), 1:7],
taxon_level = "genus",
var_list = c("cruise","sample"),
number = 40,
tax_disp = c("phylum", "family", "genus"),
X_levels = x_fauna_nmds2,
trans = "identity", bars = T, proportional = T) + th1 + colors_fauna_sps
fauna_sps_red_bars_legend <- get_legend(stacked.bars(input_variable = var_red,
input_community = fauna_count_red,
input_tax = fauna_count_tax[colnames(fauna_count_red), 1:7],
taxon_level = "genus",
var_list = c("cruise","sample"),
number = 40,
tax_disp = c("phylum", "family", "genus"),
X_levels = x_fauna_nmds2,
trans = "identity", bars = T, proportional = T) + th2 + colors_fauna_sps)
}
micro_gen_red_bars_nmds1 + fauna_sps_red_bars_nmds1 +
micro_gen_red_bars_nmds2 + fauna_sps_red_bars_nmds2 +
plot_layout(ncol = 2, nrow = 2, widths = c(1, 1), heights = c(1, 1))
plot_spacer() + micro_gen_red_bars_legend + fauna_sps_red_bars_legend +
plot_layout(ncol = 3, nrow = 1, widths = c(1, 10, 10), heights = c(1, 1, 1))
##########################
#### nMDS PLOTS ####
var_red_perms <- with(var_red, how(nperm = 9999, blocks = cruise))
### micro
micro_red_envfit    <- envfit(micro_red_nmds,   var_red[, c("vms_ospar", "temperature", "log2_grain", "log_tom", "sqrt_mud", "shear_stress", "log_fauna_mass", "log_BPc", "log_IPc")], permutations = var_red_perms, add = T);micro_red_envfit
micro_red_envfit_phyla     <- envfit(micro_red_nmds, cbind(taxonomy.aggregate(micro_rar_red, micro_rar_tax, level = "class")[, c(1,3,5)], taxonomy.aggregate(micro_rar_red, micro_rar_tax, level = "phylum")[, 2:8]), permutations = var_red_perms, add = T);micro_red_envfit_phyla
micro_red_envfit_functions <- envfit(micro_red_nmds, var_red[, c("respiration", "denitrification","sulfate_reduction", "nitrification", "mixed_acid_fermentation", "acetogenesis","acetylcoa_fermentation", "acetylene_fermentation", "sulfur_oxidation", "methane_oxidation", "CO2_reduction")], permutations = var_red_perms, add = T);micro_red_envfit_functions
nmds_micro_red     <- nmds.ggplot(micro_red_nmds, var_red, micro_red_envfit, micro_red_envfit_functions , scale = 1, fill = var_red$log_tom) +
theme(legend.position = "right", axis.title.x = element_blank(), axis.title.y = element_text())
nmds_micro_red_var <- nmds.ggplot(micro_red_nmds, var_red, micro_red_envfit, scale = 1, fill = log(var_red$tom)) +
theme(legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_text())
nmds_micro_red_tax <- nmds.ggplot(micro_red_nmds, var_red, micro_red_envfit_phyla , scale = 1, fill = log(var_red$tom)) +
theme(legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank())
nmds_micro_red_fun <- nmds.ggplot(micro_red_nmds, var_red, micro_red_envfit_functions , scale = 1, fill = log(var_red$tom)) +
theme(legend.position = "right", axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank())
### fauna
fauna_count_red_envfit    <- envfit(fauna_count_red_nmds, var_red[, c("vms_ospar", "temperature", "log2_grain", "log_tom", "sqrt_mud", "shear_stress", "log_fauna_mass", "log_BPc", "log_IPc")], permutations = var_red_perms, add = T);fauna_count_red_envfit
fauna_count_red_envfit_phyla     <- envfit(fauna_count_red_nmds, taxonomy.aggregate(fauna_count_red/rowSums(fauna_count_red), fauna_count_tax[colnames(fauna_count_red),], level = "phylum")[, 1:8], permutations = var_red_perms, add = T);fauna_count_red_envfit_phyla
fauna_count_red_envfit_functions <- envfit(fauna_count_red_nmds, var_red[, c("respiration", "denitrification","sulfate_reduction", "nitrification", "mixed_acid_fermentation", "acetogenesis","acetylcoa_fermentation", "acetylene_fermentation", "sulfur_oxidation", "methane_oxidation", "CO2_reduction")], permutations = var_red_perms, add = T);fauna_count_red_envfit_functions
nmds_fauna_red     <- nmds.ggplot(fauna_count_red_nmds,  var_red, fauna_count_red_envfit, fauna_count_red_envfit_functions , scale = 2, fill = log(var_red$cruise)) +
theme(legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank())
nmds_fauna_red_var <- nmds.ggplot(fauna_count_red_nmds,  var_red, fauna_count_red_envfit, scale = 2, fill = log(var_red$tom)) +
theme(legend.position = "none", axis.title.x = element_text(), axis.title.y = element_text())
nmds_fauna_red_tax <- nmds.ggplot(fauna_count_red_nmds,  var_red, fauna_count_red_envfit_phyla , scale = 2, fill = log(var_red$tom)) +
theme(legend.position = "none", axis.title.x = element_text(), axis.title.y = element_blank(), axis.text.y = element_blank())
nmds_fauna_red_fun <- nmds.ggplot(fauna_count_red_nmds,  var_red, fauna_count_red_envfit_functions , scale = 2, fill = log(var_red$tom)) +
theme(legend.position = "none", axis.title.x = element_text(), axis.title.y = element_blank(), axis.text.y = element_blank())
### plot
nmds_micro_red_var + nmds_micro_red_tax + nmds_micro_red_fun +
nmds_fauna_red_var + nmds_fauna_red_tax + nmds_fauna_red_fun +
plot_layout(ncol = 3, nrow = 2, widths = c(1, 1, 1), heights = c(1, 1))
plot_spacer() + micro_gen_red_bars_legend + fauna_sps_red_bars_legend +
plot_layout(ncol = 3, nrow = 1, widths = c(1, 10, 10), heights = c(1, 1, 1))
micro_gen_red_bars_nmds1 + fauna_sps_red_bars_nmds1 +
micro_gen_red_bars_nmds2 + fauna_sps_red_bars_nmds2 +
plot_layout(ncol = 2, nrow = 2, widths = c(1, 1), heights = c(1, 1))
nmds_fauna_red
nmds_fauna_red     <- nmds.ggplot(fauna_count_red_nmds,  var_red, fauna_count_red_envfit, fauna_count_red_envfit_functions , scale = 2, fill = log(var_red$cruise)) +
theme(legend.position = "none", axis.title.x = element_blank(), axis.title.y = element_blank())
### plot
nmds_micro_red_var + nmds_micro_red_tax + nmds_micro_red_fun +
nmds_fauna_red_var + nmds_fauna_red_tax + nmds_fauna_red_fun +
plot_layout(ncol = 3, nrow = 2, widths = c(1, 1, 1), heights = c(1, 1))
nmds_micro_red_var
nmds_micro_red_var
nmds_micro_red_var
ggsave(file = "C:/dam_holo/figs/nmds_micro.svg", plot = nmds_micro_red_var, width = 10, height = 10)
library("svglite")
install.packages("svglite")
ggsave(file = "C:/dam_holo/figs/nmds_micro.svg", plot = nmds_micro_red_var, width = 10, height = 10)
### plot
nmds_micro_red_var + nmds_micro_red_tax + nmds_micro_red_fun +
nmds_fauna_red_var + nmds_fauna_red_tax + nmds_fauna_red_fun +
plot_layout(ncol = 3, nrow = 2, widths = c(1, 1, 1), heights = c(1, 1))
nmds_micro_red_tax
ggsave(file = "C:/dam_holo/figs/nmds_micro_red_tax.svg", plot = nmds_micro_red_tax, width = 10, height = 10)
ggsave(file = "C:/dam_holo/figs/nmds_fauna_red_tax.svg", plot = nmds_micro_red_tax, width = 10, height = 10)
nmds_fauna_red_tax <- nmds.ggplot(fauna_count_red_nmds,  var_red, fauna_count_red_envfit_phyla , scale = 2, fill = log(var_red$tom)) +
theme(legend.position = "none", axis.title.x = element_text(), axis.title.y = element_blank(), axis.text.y = element_blank())
nmds_fauna_red_tax
ggsave(file = "C:/dam_holo/figs/nmds_fauna_red_tax.svg", plot = nmds_micro_red_tax, width = 10, height = 10)
ggsave(file = "C:/dam_holo/figs/nmds_fauna_red_tax.svg", plot = nmds_fauna_red_tax, width = 10, height = 10)
### plot
nmds_micro_red_var + nmds_micro_red_tax + nmds_micro_red_fun +
nmds_fauna_red_var + nmds_fauna_red_tax + nmds_fauna_red_fun +
plot_layout(ncol = 3, nrow = 2, widths = c(1, 1, 1), heights = c(1, 1))
View(micro_pw_red_nmds)
