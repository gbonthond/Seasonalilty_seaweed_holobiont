} else {
dif_seas <- data.frame("taxon"  = rownames(smry$uni.p),
"abundance"  = colSums(model$y),
"p_val"   = p.adjust(aov$uni.p["season", ], method = p.adjust),
"p_val_s" = p.adjust(smry$uni.p[, "seasonwinter"], method = p.adjust),
"coefficient"= smry$est["seasonwinter", -1],
"std_error"  = smry$est.stderr["seasonwinter", ])
### calculate lower and upper 95% CI limits
dif_seas$lower <- dif_seas$coefficient - ci * dif_seas$std_error
dif_seas$upper <- dif_seas$coefficient + ci * dif_seas$std_error
dif_seas_core <- dif_seas[dif_seas$p_val < p &
dif_seas$p_val_s < p &
abs(dif_seas$coefficient) > coef &
((dif_seas$lower < 0 & dif_seas$upper < 0) |
(dif_seas$lower > 0 & dif_seas$upper > 0)), ]
dif_seas_core$core <- ifelse(dif_seas_core$coefficient < 0, "summer", "winter")
dif_seas_core <- dif_seas_core[order(dif_seas_core$abundance, decreasing = T), ]
return(dif_seas_core)
}
}
occupancy <- function(community, taxonomy) {
com <- community[, rownames(taxonomy)]
com[com != 0] <- 1
occupancy <- colSums(com)/nrow(com)
}
abundance <- function(community, taxonomy, proportional = T) {
com <- community[, rownames(taxonomy)]
if(proportional == F){
abundance <- colSums(com)}
else
abundance <- colSums(com)/sum(colSums(com))
}
###################
##### DATA PREPARATION #####
permanent_otu <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_otu.csv", header = T, row.names = 1);dim(permanent_otu)
permanent_var <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_var.csv", header = T, row.names = 1, stringsAsFactors = T);dim(permanent_var)
permanent_tax <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_tax.csv", header = T, row.names = 1);dim(permanent_tax)
permanent_ko  <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_ko.csv", header = T, row.names = 1);dim(permanent_ko)
# Reduced to 95% cumulative most abundant OTUs of at least 0.25 prevelance
permanent_tax_sub <- permanent_tax[cumsum(permanent_tax$abundance) < .95 & permanent_tax$occupancy > .25, ];dim(permanent_tax_sub)
permanent_otu_sub <- permanent_otu[, rownames(permanent_tax_sub)];dim(permanent_otu_sub)
### subset data for "seasonal core" to sample_type == "alga" and t6, t1 (winter) and t3, t4 (summer) only
season_var <- droplevels(permanent_var[permanent_var$sample_type == "alga" & permanent_var$timepoint != "t2" & permanent_var$timepoint != "t5", ]);dim(season_var)
season_otu <- permanent_otu_sub[rownames(season_var), colSums(permanent_otu_sub[rownames(permanent_var), ]) > 0];dim(season_otu)
### make a new variable season with two levels (summer and winter)
season_var$season <- with(season_var, ifelse(timepoint == "t6", "winter", ifelse(timepoint == "t1", "winter", "summer")))
##########################
#### DIVERSITY ####
permanent_var$otu_chao <- ChaoRichness(t(permanent_otu))[, 2]
permanent_var$otu_PIE <- calc_PIE(permanent_otu)
permanent_var$ko_chao <- ChaoRichness(t(permanent_ko))[, 2]
permanent_var$ko_PIE <- calc_PIE(round(permanent_ko))
alga_var <- droplevels(permanent_var[permanent_var$sample_type == "alga", ]);dim(alga_var)
glm_otu_chao   <- glm(otu_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_chao , n = 1000))
Anova(glm_otu_chao)
glm_otu_chao_effect <- data.frame(emmeans(glm_otu_chao, specs = "timepoint"));glm_otu_chao_effect
glm_otu_chao_pp <- emmeans(glm_otu_chao, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_otu_chao$deviance/glm_otu_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE_effect <- data.frame(emmeans(glm_otu_PIE, specs = "timepoint"));glm_otu_PIE_effect
glm_otu_PIE_pp <- emmeans(glm_otu_PIE, pairwise ~ timepoint)
glm_otu_PIE_pseudo_R2 <- 1-(glm_otu_PIE$deviance/glm_otu_PIE$null.deviance); glm_otu_PIE_pseudo_R2
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
glm_ko_chao_effect <- data.frame(emmeans(glm_ko_chao, specs = "timepoint"));glm_ko_chao_effect
glm_ko_chao_pp <- emmeans(glm_ko_chao, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_ko_chao$deviance/glm_ko_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_ko_PIE   <- glm(logit(ko_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_PIE , n = 1000))
Anova(glm_ko_PIE, test.statistic = "LR")
glm_ko_PIE_effect <- data.frame(emmeans(glm_ko_PIE, specs = "timepoint"));glm_ko_PIE_effect
glm_ko_PIE_pp <- emmeans(glm_ko_PIE, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_ko_PIE$deviance/glm_ko_PIE$null.deviance); glm_otu_chao_pseudo_R2
##################
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
glm_ko_chao_effect <- data.frame(emmeans(glm_ko_chao, specs = "timepoint"));glm_ko_chao_effect
emmeans(glm_ko_chao, pairwise ~ timepoint)
glm_ko_chao_effect <- data.frame(emmeans(glm_ko_chao, specs = "timepoint"));glm_ko_chao_effect
glm_ko_chao_pp <- emmeans(glm_ko_chao, pairwise ~ timepoint)
glm_ko_chao_effect
glm_otu_PIE_pp <- emmeans(glm_otu_PIE, pairwise ~ timepoint)
glm_ko_chao_pp <- emmeans(glm_ko_chao, pairwise ~ timepoint)
glm_ko_chao_pp
glm_ko_PIE   <- glm(logit(ko_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_PIE , n = 1000))
Anova(glm_ko_PIE, test.statistic = "LR")
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE   <- glm(logit(otu_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE   <- glm(logit(otu_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
alga_var$year
##### PACKAGES #####
library("mvabund")  # mulivariate GLMs (mGLMs)
library("ggplot2")  # plots
library("iNEXT")    # diversity indices
library("mobr")       # calculating evenness
library("DHARMa")     # for diagnostic plots when running GLMMs
library("car")        # generalized linear mixed models (GLMMs) additional package
library("DescTools")  # calculating pseudo R2
library("effects")    # plotting
library("emmeans")    # package to get means and confidence intervals for plotting; post-hoc test
##################
##### FUNCTIONS #####
permanent.core <- function(model, smry, aov = NULL, p = 0.01, coef = 0, pooled = F, p.adjust = "none"){
dif_alga <- data.frame("taxon"         = colnames(model$y),
"abundance"     = colSums(model$y),
"occupancy"    = colSums(model$y != 0)/nrow(model$y),
"p_val_2"       = p.adjust(smry$uni.p[, paste("sample_type", levels(model$data$sample_type)[2], sep = "")], method = p.adjust),
"p_val_3"       = p.adjust(smry$uni.p[, paste("sample_type", levels(model$data$sample_type)[3], sep = "")], method = p.adjust),
"p_fisher"      = p.adjust(pchisq(-2*(log(smry$uni.p[, paste("sample_type", levels(model$data$sample_type)[2], sep = "")]) + log(smry$uni.p[, paste("sample_type", levels(model$data$sample_type)[3], sep = "")])), df = 4, lower.tail = F), method = p.adjust),
"coefficient_2" = smry$est[paste("sample_type", levels(model$data$sample_type)[2], sep = ""), -1],
"coefficient_3" = smry$est[paste("sample_type", levels(model$data$sample_type)[3], sep=""), -1],
"std_error_2"   = smry$est.stderr[paste("sample_type", levels(model$data$sample_type)[2], sep = ""), ],
"std_error_3"   = smry$est.stderr[paste("sample_type", levels(model$data$sample_type)[3], sep = ""), ])
if(p == 0.01){ ci <- 2.807 } else { ci <- 1.96 }
### calculate lower and upper CI limits
dif_alga$lower_2 <- dif_alga$coefficient_2 - ci * dif_alga$std_error_2
dif_alga$upper_2 <- dif_alga$coefficient_2 + ci * dif_alga$std_error_2
dif_alga$lower_3 <- dif_alga$coefficient_3 - ci * dif_alga$std_error_3
dif_alga$upper_3 <- dif_alga$coefficient_3 + ci * dif_alga$std_error_3
### pooling stder
dif_alga$averaged_coefficient <- (dif_alga$coefficient_2 + dif_alga$coefficient_3)/2
dif_alga$pooled_std_error     <- sqrt((dif_alga$std_error_2^2 + dif_alga$std_error_3^2)/2)
dif_alga$pooled_lower <- dif_alga$averaged_coefficient - ci * dif_alga$pooled_std_error
dif_alga$pooled_upper <- dif_alga$averaged_coefficient + ci * dif_alga$pooled_std_error
# subsetting
if(is.null(aov) == T){
dif_alga_core <- dif_alga[dif_alga$p_val_2 < p &
dif_alga$p_val_3 < p &
dif_alga$coefficient_2 < -coef &
dif_alga$coefficient_3 < -coef &
dif_alga$pooled_lower < 0 & dif_alga$pooled_upper < 0, ]
} else {
dif_alga_core <- dif_alga[dif_alga$p_val_2 < p &
dif_alga$p_val_3 < p &
dif_alga$coefficient_2 < -coef &
dif_alga$coefficient_3 < -coef &
dif_alga$pooled_lower < 0 & dif_alga$pooled_upper < 0, ]
}
dif_alga_stacked <- data.frame(
"taxon" = rep(rownames(dif_alga_core), 2),
"abundance" = rep(dif_alga_core$abundance, 2),
"coefficient" = stack(dif_alga_core, c("coefficient_2", "coefficient_3"))[, 1],
"sample_type" = stack(dif_alga_core, c("coefficient_2", "coefficient_3"))[, 2],
"lower" = stack(dif_alga_core, select = c("lower_2", "lower_3"))[, 1],
"upper" = stack(dif_alga_core, select = c("upper_2", "upper_3"))[, 1],
"std_error" = stack(dif_alga_core, c("std_error_2", "std_error_3"))[, 1]
)
dif_alga_stacked <- dif_alga_stacked[order(dif_alga_stacked$abundance, decreasing = T), ]
dif_alga_core <- dif_alga_core[order(dif_alga_core$abundance, decreasing = T), ]
colnames(dif_alga_core) <- c("taxon",
"abundance",
"occupancy",
paste("p_val", levels(model$data$sample_type)[2], sep = "_"),
paste("p_val", levels(model$data$sample_type)[3], sep = "_"),
"p_val_fisher",
paste("coefficient", levels(model$data$sample_type)[2], sep = "_"),
paste("coefficient", levels(model$data$sample_type)[3], sep = "_"),
paste("std_error", levels(model$data$sample_type)[2], sep = "_"),
paste("std_error", levels(model$data$sample_type)[3], sep = "_"),
paste("lower", levels(model$data$sample_type)[2], sep = "_"),
paste("lower", levels(model$data$sample_type)[3], sep = "_"),
paste("upper", levels(model$data$sample_type)[2], sep = "_"),
paste("upper", levels(model$data$sample_type)[3], sep = "_"),
"averaged_coefficient",
"pooled_std_error",
"pooled_lower",
"pooled_upper")
if(pooled == T){
return(dif_alga_core)
}  else  {
return(dif_alga_stacked)
}
}
seasonal.core  <- function(model, smry, aov = NULL, p = 0.01, coef = 0, p.adjust = "none"){
if(p == 0.01){ ci <- 2.807 } else { ci <- 1.96 }
if(is.null(aov) == T){
dif_seas <- data.frame("taxon"  = rownames(smry$uni.p),
"abundance"  = colSums(model$y),
"p_val_s" = p.adjust(smry$uni.p[, "seasonwinter"], method = p.adjust),
"coefficient"= smry$est["seasonwinter", -1],
"std_error"  = smry$est.stderr["seasonwinter", ])
### calculate lower and upper CI limits
dif_seas$lower <- dif_seas$coefficient - ci * dif_seas$std_error
dif_seas$upper <- dif_seas$coefficient + ci * dif_seas$std_error
dif_seas_core <- dif_seas[dif_seas$p_val_s < p &
abs(dif_seas$coefficient) > coef &
((dif_seas$lower < 0 & dif_seas$upper < 0) |
(dif_seas$lower > 0 & dif_seas$upper > 0)), ]
dif_seas_core$core <- ifelse(dif_seas_core$coefficient < 0, "summer", "winter")
dif_seas_core <- dif_seas_core[order(dif_seas_core$abundance, decreasing = T), ]
return(dif_seas_core)
} else {
dif_seas <- data.frame("taxon"  = rownames(smry$uni.p),
"abundance"  = colSums(model$y),
"p_val"   = p.adjust(aov$uni.p["season", ], method = p.adjust),
"p_val_s" = p.adjust(smry$uni.p[, "seasonwinter"], method = p.adjust),
"coefficient"= smry$est["seasonwinter", -1],
"std_error"  = smry$est.stderr["seasonwinter", ])
### calculate lower and upper 95% CI limits
dif_seas$lower <- dif_seas$coefficient - ci * dif_seas$std_error
dif_seas$upper <- dif_seas$coefficient + ci * dif_seas$std_error
dif_seas_core <- dif_seas[dif_seas$p_val < p &
dif_seas$p_val_s < p &
abs(dif_seas$coefficient) > coef &
((dif_seas$lower < 0 & dif_seas$upper < 0) |
(dif_seas$lower > 0 & dif_seas$upper > 0)), ]
dif_seas_core$core <- ifelse(dif_seas_core$coefficient < 0, "summer", "winter")
dif_seas_core <- dif_seas_core[order(dif_seas_core$abundance, decreasing = T), ]
return(dif_seas_core)
}
}
occupancy <- function(community, taxonomy) {
com <- community[, rownames(taxonomy)]
com[com != 0] <- 1
occupancy <- colSums(com)/nrow(com)
}
abundance <- function(community, taxonomy, proportional = T) {
com <- community[, rownames(taxonomy)]
if(proportional == F){
abundance <- colSums(com)}
else
abundance <- colSums(com)/sum(colSums(com))
}
###################
##### DATA PREPARATION #####
permanent_otu <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_otu.csv", header = T, row.names = 1);dim(permanent_otu)
permanent_var <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_var.csv", header = T, row.names = 1, stringsAsFactors = T);dim(permanent_var)
permanent_tax <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_tax.csv", header = T, row.names = 1);dim(permanent_tax)
permanent_ko  <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_ko.csv", header = T, row.names = 1);dim(permanent_ko)
# Reduced to 95% cumulative most abundant OTUs of at least 0.25 prevelance
permanent_tax_sub <- permanent_tax[cumsum(permanent_tax$abundance) < .95 & permanent_tax$occupancy > .25, ];dim(permanent_tax_sub)
permanent_otu_sub <- permanent_otu[, rownames(permanent_tax_sub)];dim(permanent_otu_sub)
### subset data for "seasonal core" to sample_type == "alga" and t6, t1 (winter) and t3, t4 (summer) only
season_var <- droplevels(permanent_var[permanent_var$sample_type == "alga" & permanent_var$timepoint != "t2" & permanent_var$timepoint != "t5", ]);dim(season_var)
season_otu <- permanent_otu_sub[rownames(season_var), colSums(permanent_otu_sub[rownames(permanent_var), ]) > 0];dim(season_otu)
### make a new variable season with two levels (summer and winter)
season_var$season <- with(season_var, ifelse(timepoint == "t6", "winter", ifelse(timepoint == "t1", "winter", "summer")))
##########################
#### DIVERSITY ####
permanent_var$otu_chao <- ChaoRichness(t(permanent_otu))[, 2]
permanent_var$otu_PIE <- calc_PIE(permanent_otu)
permanent_var$ko_chao <- ChaoRichness(t(permanent_ko))[, 2]
permanent_var$ko_PIE <- calc_PIE(round(permanent_ko))
alga_var <- droplevels(permanent_var[permanent_var$sample_type == "alga", ]);dim(alga_var)
glm_otu_chao   <- glm(otu_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_chao , n = 1000))
Anova(glm_otu_chao)
glm_otu_chao_effect <- data.frame(emmeans(glm_otu_chao, specs = "timepoint"));glm_otu_chao_effect
glm_otu_chao_pp <- emmeans(glm_otu_chao, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_otu_chao$deviance/glm_otu_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE_pp <- emmeans(glm_otu_PIE, pairwise ~ timepoint)
glm_otu_PIE_pseudo_R2 <- 1-(glm_otu_PIE$deviance/glm_otu_PIE$null.deviance); glm_otu_PIE_pseudo_R2
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
glm_ko_chao_pp <- emmeans(glm_ko_chao, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_ko_chao$deviance/glm_ko_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_ko_PIE   <- glm(logit(ko_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_PIE , n = 1000))
Anova(glm_ko_PIE, test.statistic = "LR")
glm_ko_PIE_effect <- data.frame(emmeans(glm_ko_PIE, specs = "timepoint"));glm_ko_PIE_effect
glm_ko_PIE_pp <- emmeans(glm_ko_PIE, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_ko_PIE$deviance/glm_ko_PIE$null.deviance); glm_otu_chao_pseudo_R2
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
Anova(glm_ko_PIE, test.statistic = "LR")
Anova(glm_otu_PIE)
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
Anova(glm_otu_PIE)
Anova(glm_ko_PIE, test.statistic = "LR")
Anova(glm_otu_chao)
Anova(glm_otu_PIE)
Anova(glm_ko_chao)
glm_ko_chao_pp
glm_otu_PIE   <- glm(logit(otu_PIE) ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE   <- glm(logit(otu_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
alga_var$season
alga_var$year
glm_otu_PIE   <- glm(logit(otu_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
Anova(glm_ko_PIE, test.statistic = "LR")
glm_ko_PIE   <- glm(logit(ko_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_PIE , n = 1000))
Anova(glm_ko_PIE, test.statistic = "LR")
alga_var$season
alga_var$timepoint
plot(simulateResiduals(fittedModel = glm_ko_PIE , n = 1000))
Anova(glm_ko_PIE, test.statistic = "LR")
Anova(glm_otu_PIE)
glm_otu_PIE_pp
glm_ko_PIE_pp <- emmeans(glm_ko_PIE, pairwise ~ timepoint)
glm_ko_PIE_pp
##### PACKAGES #####
library("mvabund")  # mulivariate GLMs (mGLMs)
library("ggplot2")  # plots
library("iNEXT")    # diversity indices
library("mobr")       # calculating evenness
library("DHARMa")     # for diagnostic plots when running GLMMs
library("car")        # generalized linear mixed models (GLMMs) additional package
library("DescTools")  # calculating pseudo R2
library("effects")    # plotting
library("emmeans")    # package to get means and confidence intervals for plotting; post-hoc test
##################
##### FUNCTIONS #####
permanent.core <- function(model, smry, aov = NULL, p = 0.01, coef = 0, pooled = F, p.adjust = "none"){
dif_alga <- data.frame("taxon"         = colnames(model$y),
"abundance"     = colSums(model$y),
"occupancy"    = colSums(model$y != 0)/nrow(model$y),
"p_val_2"       = p.adjust(smry$uni.p[, paste("substrate", levels(model$data$substrate)[2], sep = "")], method = p.adjust),
"p_val_3"       = p.adjust(smry$uni.p[, paste("substrate", levels(model$data$substrate)[3], sep = "")], method = p.adjust),
"p_fisher"      = p.adjust(pchisq(-2*(log(smry$uni.p[, paste("substrate", levels(model$data$substrate)[2], sep = "")]) + log(smry$uni.p[, paste("substrate", levels(model$data$substrate)[3], sep = "")])), df = 4, lower.tail = F), method = p.adjust),
"coefficient_2" = smry$est[paste("substrate", levels(model$data$substrate)[2], sep = ""), -1],
"coefficient_3" = smry$est[paste("substrate", levels(model$data$substrate)[3], sep=""), -1],
"std_error_2"   = smry$est.stderr[paste("substrate", levels(model$data$substrate)[2], sep = ""), ],
"std_error_3"   = smry$est.stderr[paste("substrate", levels(model$data$substrate)[3], sep = ""), ])
if(p == 0.01){ ci <- 2.807 } else { ci <- 1.96 }
### calculate lower and upper CI limits
dif_alga$lower_2 <- dif_alga$coefficient_2 - ci * dif_alga$std_error_2
dif_alga$upper_2 <- dif_alga$coefficient_2 + ci * dif_alga$std_error_2
dif_alga$lower_3 <- dif_alga$coefficient_3 - ci * dif_alga$std_error_3
dif_alga$upper_3 <- dif_alga$coefficient_3 + ci * dif_alga$std_error_3
### pooling stder
dif_alga$averaged_coefficient <- (dif_alga$coefficient_2 + dif_alga$coefficient_3)/2
dif_alga$pooled_std_error     <- sqrt((dif_alga$std_error_2^2 + dif_alga$std_error_3^2)/2)
dif_alga$pooled_lower <- dif_alga$averaged_coefficient - ci * dif_alga$pooled_std_error
dif_alga$pooled_upper <- dif_alga$averaged_coefficient + ci * dif_alga$pooled_std_error
# subsetting
if(is.null(aov) == T){
dif_alga_core <- dif_alga[dif_alga$p_val_2 < p &
dif_alga$p_val_3 < p &
dif_alga$coefficient_2 < -coef &
dif_alga$coefficient_3 < -coef &
dif_alga$pooled_lower < 0 & dif_alga$pooled_upper < 0, ]
} else {
dif_alga_core <- dif_alga[dif_alga$p_val_2 < p &
dif_alga$p_val_3 < p &
dif_alga$coefficient_2 < -coef &
dif_alga$coefficient_3 < -coef &
dif_alga$pooled_lower < 0 & dif_alga$pooled_upper < 0, ]
}
dif_alga_stacked <- data.frame(
"taxon" = rep(rownames(dif_alga_core), 2),
"abundance" = rep(dif_alga_core$abundance, 2),
"coefficient" = stack(dif_alga_core, c("coefficient_2", "coefficient_3"))[, 1],
"substrate" = stack(dif_alga_core, c("coefficient_2", "coefficient_3"))[, 2],
"lower" = stack(dif_alga_core, select = c("lower_2", "lower_3"))[, 1],
"upper" = stack(dif_alga_core, select = c("upper_2", "upper_3"))[, 1],
"std_error" = stack(dif_alga_core, c("std_error_2", "std_error_3"))[, 1]
)
dif_alga_stacked <- dif_alga_stacked[order(dif_alga_stacked$abundance, decreasing = T), ]
dif_alga_core <- dif_alga_core[order(dif_alga_core$abundance, decreasing = T), ]
colnames(dif_alga_core) <- c("taxon",
"abundance",
"occupancy",
paste("p_val", levels(model$data$substrate)[2], sep = "_"),
paste("p_val", levels(model$data$substrate)[3], sep = "_"),
"p_val_fisher",
paste("coefficient", levels(model$data$substrate)[2], sep = "_"),
paste("coefficient", levels(model$data$substrate)[3], sep = "_"),
paste("std_error", levels(model$data$substrate)[2], sep = "_"),
paste("std_error", levels(model$data$substrate)[3], sep = "_"),
paste("lower", levels(model$data$substrate)[2], sep = "_"),
paste("lower", levels(model$data$substrate)[3], sep = "_"),
paste("upper", levels(model$data$substrate)[2], sep = "_"),
paste("upper", levels(model$data$substrate)[3], sep = "_"),
"averaged_coefficient",
"pooled_std_error",
"pooled_lower",
"pooled_upper")
if(pooled == T){
return(dif_alga_core)
}  else  {
return(dif_alga_stacked)
}
}
seasonal.core  <- function(model, smry, aov = NULL, p = 0.01, coef = 0, p.adjust = "none"){
if(p == 0.01){ ci <- 2.807 } else { ci <- 1.96 }
if(is.null(aov) == T){
dif_seas <- data.frame("taxon"  = rownames(smry$uni.p),
"abundance"  = colSums(model$y),
"p_val_s" = p.adjust(smry$uni.p[, "seasonwinter"], method = p.adjust),
"coefficient"= smry$est["seasonwinter", -1],
"std_error"  = smry$est.stderr["seasonwinter", ])
### calculate lower and upper CI limits
dif_seas$lower <- dif_seas$coefficient - ci * dif_seas$std_error
dif_seas$upper <- dif_seas$coefficient + ci * dif_seas$std_error
dif_seas_core <- dif_seas[dif_seas$p_val_s < p &
abs(dif_seas$coefficient) > coef &
((dif_seas$lower < 0 & dif_seas$upper < 0) |
(dif_seas$lower > 0 & dif_seas$upper > 0)), ]
dif_seas_core$core <- ifelse(dif_seas_core$coefficient < 0, "summer", "winter")
dif_seas_core <- dif_seas_core[order(dif_seas_core$abundance, decreasing = T), ]
return(dif_seas_core)
} else {
dif_seas <- data.frame("taxon"  = rownames(smry$uni.p),
"abundance"  = colSums(model$y),
"p_val"   = p.adjust(aov$uni.p["season", ], method = p.adjust),
"p_val_s" = p.adjust(smry$uni.p[, "seasonwinter"], method = p.adjust),
"coefficient"= smry$est["seasonwinter", -1],
"std_error"  = smry$est.stderr["seasonwinter", ])
### calculate lower and upper 95% CI limits
dif_seas$lower <- dif_seas$coefficient - ci * dif_seas$std_error
dif_seas$upper <- dif_seas$coefficient + ci * dif_seas$std_error
dif_seas_core <- dif_seas[dif_seas$p_val < p &
dif_seas$p_val_s < p &
abs(dif_seas$coefficient) > coef &
((dif_seas$lower < 0 & dif_seas$upper < 0) |
(dif_seas$lower > 0 & dif_seas$upper > 0)), ]
dif_seas_core$core <- ifelse(dif_seas_core$coefficient < 0, "summer", "winter")
dif_seas_core <- dif_seas_core[order(dif_seas_core$abundance, decreasing = T), ]
return(dif_seas_core)
}
}
occupancy <- function(community, taxonomy) {
com <- community[, rownames(taxonomy)]
com[com != 0] <- 1
occupancy <- colSums(com)/nrow(com)
}
abundance <- function(community, taxonomy, proportional = T) {
com <- community[, rownames(taxonomy)]
if(proportional == F){
abundance <- colSums(com)}
else
abundance <- colSums(com)/sum(colSums(com))
}
###################
##### DATA PREPARATION #####
permanent_otu <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_otu.csv", header = T, row.names = 1);dim(permanent_otu)
permanent_var <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_var.csv", header = T, row.names = 1, stringsAsFactors = T);dim(permanent_var)
permanent_tax <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_tax.csv", header = T, row.names = 1);dim(permanent_tax)
permanent_ko  <- read.csv(file = "C:/Users/Bonthond/Documents/GitHub/Seasonalilty_seaweed_holobiont/seasonality_ko.csv", header = T, row.names = 1);dim(permanent_ko)
# Reduced to 95% cumulative most abundant OTUs of at least 0.25 prevelance
permanent_tax_sub <- permanent_tax[cumsum(permanent_tax$abundance) < .95 & permanent_tax$occupancy > .25, ];dim(permanent_tax_sub)
permanent_otu_sub <- permanent_otu[, rownames(permanent_tax_sub)];dim(permanent_otu_sub)
### subset data for "seasonal core" to substrate == "alga" and t6, t1 (winter) and t3, t4 (summer) only
season_var <- droplevels(permanent_var[permanent_var$substrate == "alga" & permanent_var$timepoint != "t2" & permanent_var$timepoint != "t5", ]);dim(season_var)
season_otu <- permanent_otu_sub[rownames(season_var), colSums(permanent_otu_sub[rownames(permanent_var), ]) > 0];dim(season_otu)
### make a new variable season with two levels (summer and winter)
season_var$season <- with(season_var, ifelse(timepoint == "t6", "winter", ifelse(timepoint == "t1", "winter", "summer")))
##########################
#### DIVERSITY ####
permanent_var$otu_chao <- ChaoRichness(t(permanent_otu))[, 2]
permanent_var$otu_PIE <- calc_PIE(permanent_otu)
permanent_var$ko_chao <- ChaoRichness(t(permanent_ko))[, 2]
permanent_var$ko_PIE <- calc_PIE(round(permanent_ko))
alga_var <- droplevels(permanent_var[permanent_var$substrate == "alga", ]);dim(alga_var)
glm_otu_chao   <- glm(otu_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_chao , n = 1000))
Anova(glm_otu_chao)
glm_otu_chao_effect <- data.frame(emmeans(glm_otu_chao, specs = "timepoint"));glm_otu_chao_effect
glm_otu_chao_pp <- emmeans(glm_otu_chao, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_otu_chao$deviance/glm_otu_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_ko_chao   <- glm(ko_chao ~ log(seq_depth)+ timepoint * year * pop, data = alga_var, family = gaussian(link= "log"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_chao , n = 1000))
Anova(glm_ko_chao)
glm_ko_chao_pp <- emmeans(glm_ko_chao, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_ko_chao$deviance/glm_ko_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_otu_PIE   <- glm(logit(otu_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_otu_PIE , n = 1000))
Anova(glm_otu_PIE)
glm_otu_PIE_pp <- emmeans(glm_otu_PIE, pairwise ~ timepoint)
glm_otu_PIE_pseudo_R2 <- 1-(glm_otu_PIE$deviance/glm_otu_PIE$null.deviance); glm_otu_PIE_pseudo_R2
glm_ko_PIE   <- glm(logit(ko_PIE) ~ timepoint * year * pop, data = alga_var, family = gaussian(link= "identity"), na.action = na.fail)
plot(simulateResiduals(fittedModel = glm_ko_PIE , n = 1000))
Anova(glm_ko_PIE, test.statistic = "LR")
glm_ko_PIE_effect <- data.frame(emmeans(glm_ko_PIE, specs = "timepoint"));glm_ko_PIE_effect
glm_ko_PIE_pp <- emmeans(glm_ko_PIE, pairwise ~ timepoint)
glm_otu_chao_pseudo_R2 <- 1-(glm_ko_PIE$deviance/glm_ko_PIE$null.deviance); glm_otu_chao_pseudo_R2
##################
glm_ko_PIE_pp <- emmeans(glm_ko_PIE, pairwise ~ timepoint)
glm_ko_PIE_pp
glm_ko_PIE_effect <- data.frame(emmeans(glm_ko_PIE, specs = "timepoint"));glm_ko_PIE_effect
glm_otu_chao_pp <- emmeans(glm_otu_chao, pairwise ~ timepoint)
glm_otu_chao_pp <- emmeans(glm_otu_chao, pairwise ~ timepoint);glm_otu_chao_pp
glm_otu_chao_pseudo_R2 <- 1-(glm_otu_chao$deviance/glm_otu_chao$null.deviance); glm_otu_chao_pseudo_R2
glm_ko_PIE_pp <- emmeans(glm_ko_PIE, pairwise ~ timepoint);glm_ko_PIE_pp
Anova(glm_ko_PIE, test.statistic = "LR")
